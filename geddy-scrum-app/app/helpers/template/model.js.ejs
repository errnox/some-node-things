var <%= model.name %> = function () {

  this.defineProperties({
  <% for (var i in model.properties) { %>
  '<%= model.properties[i].name %>': {type: <%= model.properties[i].datatype %> <% if (_exists(model.properties[i], 'options.name.required')) { if (model.properties[i].options.name.required === true) { %>, required: true<% } } %>},
  <% } %>
  });

  <% for (var i in model.properties) { %>
  <% if (_exists(model, 'properties[i].validations.present')) { %>
  this.validatesPresent('<%= model.properties[i].name %>');
    <% } %>
  <% } %>

  <% for (var i in model.properties) { %>
  <% if (_exists(model, 'properties[i].validations.length.qualifier.min') || _exists(model, 'properties[i].validations.length.qualifier.max')) { %>
    this.validatesLength('<%= model.properties[i].name %>', {
    <% } %>
    <% if (_exists(model, 'properties[i].validations.length.qualifier.min')) { %>
       min: <%= model.properties[i].validations.length.qualifier.min %>
    <% } %>

    <% if (_exists(model, 'properties[i].validations.length.qulifier.min') && _exists(model, 'properties[i].validations.length.qualifier.max')) { %>
       ,
    <% } %>

    <% if (_exists(model, 'properties[i].validations.length.qualifier.min')) { %>
       max: <%= model.properties[i].validations.length.qualifier.max %>
    <% } %>
    <% if (_exists(model, 'properties[i].validations.length.qualifier.min') || _exists(model, 'properties[i].validations.length.qualifier.max')) { %>
    }
    <% } %>
  <% } %>


  this.validatesWithFunction('name', function (s) {
    return s !== 'John Doe';
  });

  /*
  this.property('login', 'string', {required: true});
  this.property('password', 'string', {required: true});
  this.property('lastName', 'string');
  this.property('firstName', 'string');

  this.validatesPresent('login');
  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});
  this.validatesLength('login', {min: 3});
  // Use with the name of the other parameter to compare with
  this.validatesConfirmed('password', 'confirmPassword');
  // Use with any function that returns a Boolean
  this.validatesWithFunction('password', function (s) {
      return s.length > 0;
  });

  // Can define methods for instances like this
  this.someMethod = function () {
    // Do some stuff
  };
  */

};

/*
// Can also define them on the prototype
Issue.prototype.someOtherMethod = function () {
  // Do some other stuff
};
// Can also define static methods and properties
Issue.someStaticMethod = function () {
  // Do some other stuff
};
Issue.someStaticProperty = 'YYZ';
*/

<%= model.name %> = geddy.model.register('<%= model.name %>', <%= model.name %>);

